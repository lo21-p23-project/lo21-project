@startuml Class Diagram

namespace Model {
    class EventManager<T> {
        + std::unordered_multimap<std::string, ISubscriber<T> *> subscribers_
        + void subscribe(std::string eventName, ISubscriber<T> *subscriber)
        + void unsubscribe(std::string eventName, ISubscriber<T> *subscriber)
        + void call(std::string eventName, T data)
        + void call(std::string eventName)
    }

    class ISubscriber<TriggerType> {
        + virtual void trigger(TriggerType param)
        + virtual void trigger()
    }

    namespace Model.Shotten {
        enum ModeOptions {
          normal
          tactic
        }

        enum Combinations {
          colorRun
          threeOfAKing
          color
          run
          sum
        }

        enum Rules {
          none
          ' sameColor
          ' sameRun
          ' sameSum
          ' sameColorRun
          ' sameThreeOfAKing
        }

        enum Phases {
          play
          claim
          draw
          pass
        }

        class Game {
          == Attributes ==
          - gameOptions: GameOptions
          - players: std::vector<Player>
          - rounds: std::vector<Round>
          - board: Board
          == Methods ==
        }

        class GameController {
          == Attributes ==
          == Methods ==
        }

        struct GameOptions {
          == Attributes ==
          - version: unsigned int
          - mode: ModeOptions
          - isExpert: bool
          - aiMode: bool
          - maxRound: unsigned int
          == Methods ==
        }

        class Round {
          == Attributes ==
          - id: unsigned int
          - winner: std::string
          - turns: std::vector<Turn>
          == Methods ==
        }

        class Turn {
          == Attributes ==
          - id: unsgined int
          - voiceTo: std::string
          - phase: Phase
          == Methods ==
        }

        namespace Model.Shotten.Player {
            class Player {
              == Attributes ==
              - username: std::string
              - lastTripDestination: std::string
              - hand: Hand
              - claimedBorders: unsigned int
              == Methods ==
            }

            class IA {

            }
        }

        class Hand {
          == Attributes ==
          - cards: std::vector<Card>
          == Methods ==
        }

        namespace Model.Shotten.Board {
            class Board {
              == Attributes ==
              - normalDeck: NormalDeck
              - tacticDeck: TacticDeck
              - discardDeck: DiscardDeck
              - borders: std::vector<Border>
              == Methods ==
            }

            namespace Model.Shotten.Board.Entities {
                class Border {
                  == Attributes ==
                  - id: unsigned int
                  - combo: Combo
                  - rules: Rules
                  == Methods ==
                }

                class Stone {
                  == Attributes ==
                  - combatMode: CombatMode
                  - claimedBy: std::string
                  == Methods ==
                }

                class Wall {
                  - isDamaged: bool
                }
            }
        }

        namespace Model.Shotten.Cards {
            abstract Card {
              == Attributes ==
              - type: std::string
              - desc: std::string
              == Methods ==
            }

            namespace Model.Shotten.Cards.CardTypes {
                class NormalCard {
                  == Attributes ==
                  value: unsigned int
                  color: std::string
                  == Methods ==
                }

                abstract TacticCard {
                  == Attributes ==
                  == Methods ==
                }

                namespace Model.Shotten.Cards.CardTypes.Tactic {
                    class CombatMode {
                      == Attributes ==
                      == Methods ==
                    }

                    class Ruse {
                      == Attributes ==
                      == Methods ==
                    }

                    class EliteTroops {
                      == Attributes ==
                      == Methods ==
                    }
                }
            }
        }

        namespace Deck {
            abstract Deck {
              == Attributes ==
              == Methods ==
            }

            namespace Model.Shotten.Deck.DeckTypes {
                class NormalDeck {
                  == Attributes ==
                  cards: std::vector<NormalCard>
                  == Methods ==
                }

                class TacticDeck {
                  == Attributes ==
                  cards: std::vector<TacticCard>
                  == Methods ==
                }

                class DiscardDeck {
                  == Attributes ==
                  cards: std::vector<Card>
                  == Methods ==
                }
            }
        }

        class Combo {
          == Attributes ==
          - engagedBy: std::string
          - cards: std::vector<Card>
          - combination: Combinations
          - sum: unsigned int
          == Methods ==
        }

        class CardsManager {
          == Attributes ==
          == Methods ==
        }
    }
}

Model.Shotten.GameController "1" -- "1" Model.Shotten.Game: controls >
Model.Shotten.GameOptions "1" -- "1" Model.Shotten.Game: has <
Model.Shotten.Round "1..*" -- "1" Model.Shotten.Game: has >
Model.Shotten.Game "1" -- "1" Model.Shotten.Board.Board: has >
Model.Shotten.Game "1" -- "2" Model.Shotten.Player.Player: isPlayedBy >

Model.Shotten.Board.Board "1" -- "7..9" Model.Shotten.Board.Entities.Border: has >
Model.Shotten.Board.Board "1" -- "1" Model.Shotten.Deck.DeckTypes.NormalDeck: has >
Model.Shotten.Board.Board "1" -- "1" Model.Shotten.Deck.DeckTypes.TacticDeck: has >
Model.Shotten.Board.Board "1" -- "1" Model.Shotten.Deck.DeckTypes.DiscardDeck: has >

Model.Shotten.Deck.DeckTypes.NormalDeck --|> Model.Shotten.Deck.Deck
Model.Shotten.Deck.DeckTypes.TacticDeck --|> Model.Shotten.Deck.Deck
Model.Shotten.Deck.DeckTypes.DiscardDeck --|> Model.Shotten.Deck.Deck

Model.Shotten.Board.Entities.Border "1" -- "0..2" Model.Shotten.Combo: has >
Model.Shotten.Board.Entities.Stone --|> Model.Shotten.Board.Entities.Border
Model.Shotten.Board.Entities.Wall --|> Model.Shotten.Board.Entities.Border

Model.Shotten.Player.Player "1" -- "1" Model.Shotten.Hand: has >
Model.Shotten.Player.Player  "1" -- "*" Model.Shotten.Round: wins >
Model.Shotten.Player.Player "1" -- "*" Model.Shotten.Turn: plays >
Model.Shotten.Player.Player "0..1" -- "0..5" Model.Shotten.Board.Board: claims >

Model.Shotten.Round "1..*" -- "1" Model.Shotten.Turn: has >

Model.Shotten.Cards.CardTypes.NormalCard --|> Model.Shotten.Cards.Card
Model.Shotten.Cards.CardTypes.TacticCard --|> Model.Shotten.Cards.Card
Model.Shotten.Cards.CardTypes.Tactic.CombatMode --|> Model.Shotten.Cards.CardTypes.TacticCard
Model.Shotten.Cards.CardTypes.Tactic.Ruse --|> Model.Shotten.Cards.CardTypes.TacticCard
Model.Shotten.Cards.CardTypes.Tactic.EliteTroops --|> Model.Shotten.Cards.CardTypes.TacticCard

Model.Shotten.Deck.DeckTypes.NormalDeck "1" -- "0..60" Model.Shotten.Cards.CardTypes.NormalCard: contains >
Model.Shotten.Deck.DeckTypes.DiscardDeck "1" -- "*" Model.Shotten.Cards.Card: contains >
Model.Shotten.Deck.DeckTypes.TacticDeck "1" -- "0..11" Model.Shotten.Cards.CardTypes.TacticCard: contains >

Model.Shotten.Combo "1" -- "0..4" Model.Shotten.Cards.Card: contains >
Model.Shotten.Hand "1" -- "0..7" Model.Shotten.Cards.Card: contains >

class Model.Shotten.Board.Board
note left: "The Board is composed by\n7 or 9 Border depending on\nthe version of the game."

class Model.Shotten.Hand
note right: "The Hand is composed by\n6 or 7 Cards depending on\nthe version of the game.\nAlso, Hand object must\ncontains 6 or 7 Cards at\nthe end of each Turn."

abstract Model.Shotten.Cards.Card
note right: "A card belongs to only one of the following \nobject at the same time: DrawPiles, \nDiscardPiles, Hands, Combos, Stones"

class Model.Shotten.Board.Entities.Border
note right: "In normal mode and v1 `rules`\nis set to `none`. In Tactic mode\nand v1, `rules` is set to `none`\nby default but can be changed\nif a `CombatMode` is engaged.\nIn v2, `rules` are set to a default\nrule and is going to be updated\nonce the `Wall` is damaged."

class Model.Shotten.Cards.CardTypes.Tactic.Ruse
note right: "In v2, a `Ruse` card can be\nsee as an `Action` card"

@enduml
