@startuml Class Diagram

enum ModeOptions {
  normal
  tactic
}

enum Combinations {
  colorRun
  threeOfAKing
  color
  run
  sum
}

enum Rules {
  none
  ' sameColor
  ' sameRun
  ' sameSum
  ' sameColorRun
  ' sameThreeOfAKing
}

enum Phases {
  play
  claim
  draw
  pass
}

class Game {
  == Attributes ==
  - gameOptions: GameOptions
  - players: std::vector<Player>
  - rounds: std::vector<Round>
  - board: Board
  == Methods ==
}

class GameController {
  == Attributes ==
  == Methods ==
}

class GameOptions {
  == Attributes ==
  - version: unsigned int
  - mode: ModeOptions
  - isExpert: bool
  - aiMode: bool
  - maxRound: unsigned int
  == Methods ==
}

class Round {
  == Attributes ==
  - id: unsigned int
  - winner: std::string
  - turns: std::vector<Turn>
  == Methods ==
}

class Turn {
  == Attributes ==
  - id: unsgined int
  - voiceTo: std::string
  - phase: Phase
  == Methods ==
}

class Player {
  == Attributes ==
  - username: std::string
  - lastTripDestination: std::string
  - hand: Hand
  - claimedBorders: unsigned int
  == Methods ==
}

class Hand {
  == Attributes ==
  - cards: std::vector<Card>
  == Methods ==
}

class Board {
  == Attributes ==
  - normalDeck: NormalDeck
  - tacticDeck: TacticDeck
  - discardDeck: DiscardDeck
  - borders: std::vector<Border>
  == Methods ==
}

abstract Deck {
  == Attributes ==
  == Methods ==
}

class NormalDeck {
  == Attributes ==
  cards: std::vector<NormalCard>
  == Methods ==
}

class TacticDeck {
  == Attributes ==
  cards: std::vector<TacticCard>
  == Methods ==
}

class DiscardDeck {
  == Attributes ==
  cards: std::vector<Card>
  == Methods ==
}

class Border {
  == Attributes ==
  - id: unsigned int
  - combo: Combo
  - rules: Rules
  == Methods ==
}

class Stone {
  == Attributes ==
  - combatMode: CombatMode
  - claimedBy: std::string
  == Methods ==
}

class Wall {
  - isDamaged: bool
}

class Combo {
  == Attributes ==
  - engagedBy: std::string
  - cards: std::vector<Card>
  - combination: Combinations
  - sum: unsigned int
  == Methods ==
}

abstract Card {
  == Attributes ==
  - type: std::string
  - desc: std::string
  == Methods ==
}

class NormalCard {
  == Attributes ==
  value: unsigned int
  color: std::string
  == Methods ==
}

abstract TacticCard {
  == Attributes ==
  == Methods ==
}

class CombatMode {
  == Attributes ==
  == Methods ==
}

class Ruse {
  == Attributes ==
  == Methods ==
}

class EliteTroops {
  == Attributes ==
  == Methods ==
}

class CardsManager {
  == Attributes ==
  == Methods ==
}


GameController "1" -- "1" Game: controls >
GameOptions "1" -- "1" Game: has <
Round "1..*" -- "1" Game: has >
Game "1" -- "1" Board: has >
Game "1" -- "2" Player: isPlayedBy >

Board "1" -- "7..9" Border: has >
Board "1" -- "1" NormalDeck: has >
Board "1" -- "1" TacticDeck: has >
Board "1" -- "1" DiscardDeck: has >

NormalDeck --|> Deck
TacticDeck --|> Deck
DiscardDeck --|> Deck

Border "1" -- "0..2" Combo: has >
Stone --|> Border
Wall --|> Border

Player "1" -- "1" Hand: has >
Player  "1" -- "*" Round: wins >
Player "1" -- "*" Turn: plays >
Player "0..1" -- "0..5" Border: claims >

Round "1..*" -- "1" Turn: has >

Card --* CardsManager: isManagedBy >
NormalCard --|> Card
TacticCard --|> Card
CombatMode --|> TacticCard
Ruse --|> TacticCard
EliteTroops --|> TacticCard

NormalDeck "1" -- "0..60" NormalCard: contains >
DiscardDeck "1" -- "*" Card: contains >
TacticDeck "1" -- "0..11" TacticCard: contains >

Combo "1" -- "0..4" Card: contains >
Hand "1" -- "0..7" Card: contains >

class Board
note left: "The Board is composed by\n7 or 9 Border depending on\nthe version of the game."

class Hand
note right: "The Hand is composed by\n6 or 7 Cards depending on\nthe version of the game.\nAlso, Hand object must\ncontains 6 or 7 Cards at\nthe end of each Turn."

abstract Card
note right: "A card belongs to only one of the following \nobject at the same time: DrawPiles, \nDiscardPiles, Hands, Combos, Stones"

class Border
note right: "In normal mode and v1 `rules`\nis set to `none`. In Tactic mode\nand v1, `rules` is set to `none`\nby default but can be changed\nif a `CombatMode` is engaged.\nIn v2, `rules` are set to a default\nrule and is going to be updated\nonce the `Wall` is damaged."

class Ruse
note right: "In v2, a `Ruse` card can be\nsee as an `Action` card"

@enduml
